plugins {
    id 'java'
}

ext {
    buildNumber = String.format("%04d", (System.getenv("GITHUB_RUN_NUMBER") ?: "0").toInteger())
}

group = 'io.github.n1ck145'
version = '1.0.0.' + buildNumber

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
}

tasks.register("copyJarIfUserMatches") {
    doLast {
        def userName = System.getProperty("user.name")
        def jarFiles = fileTree("build/libs").include("*.jar")
        
        if (!jarFiles.isEmpty()) {
            if (userName == "nicka") {
                copy {
                    from jarFiles
                    into file("C:\\Users\\nicka\\Desktop\\MC Server\\plugins")
                }
            }
        }
    }
}

tasks.register("cleanLibs") {
    doLast {
        delete fileTree("build/libs").include("*.jar")
    }
}

tasks.named("jar") {
    dependsOn("cleanLibs")
    finalizedBy("copyJarIfUserMatches")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    archiveBaseName.set(project.name)
    archiveVersion.set(version)
    archiveClassifier.set("")
}